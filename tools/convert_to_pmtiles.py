#!/usr/bin/env python3
"""
Convert generated GeoJSON isochrones to PMTiles format.

This script converts the GeoJSON files generated by generate_isochrones.py
into PMTiles format for efficient web serving.
"""

import os
import json
import logging
import subprocess
import shutil
from pathlib import Path
from typing import Dict, List, Optional

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# Configuration
_TOOLS_DIR = Path(__file__).resolve().parent
_REPO_DIR = _TOOLS_DIR.parent
CONFIG = {
    'input_dir': str((_REPO_DIR / 'src/data/isochrones').resolve()),
    'output_dir': str((_REPO_DIR / 'src/data/pmtiles').resolve()),
    'temp_dir': str((_REPO_DIR / 'src/data/temp').resolve()),
    'zoom_levels': [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]
}

class PMTilesConverter:
    """Convert GeoJSON isochrones to PMTiles format."""
    
    def __init__(self, config: Dict = None):
        self.config = config or CONFIG
        self.setup_directories()
        self.check_tippecanoe()
    
    def setup_directories(self):
        """Create necessary directories if they don't exist."""
        Path(self.config['output_dir']).mkdir(parents=True, exist_ok=True)
        Path(self.config['temp_dir']).mkdir(parents=True, exist_ok=True)
    
    def check_tippecanoe(self):
        """Check if tippecanoe is available."""
        try:
            result = subprocess.run(["tippecanoe", "--version"], capture_output=True, text=True)
            if result.returncode == 0:
                logger.info(f"Tippecanoe found: {result.stdout.strip()}")
            else:
                logger.warning("Tippecanoe found but version check failed")
        except FileNotFoundError:
            logger.error("Tippecanoe not found. Install it (e.g., apt install tippecanoe).")
            raise
    
    def convert_geojson_to_pmtiles(self, input_file: Path, output_file: Path) -> bool:
        """Convert GeoJSON directly to PMTiles using tippecanoe (supports .pmtiles outputs)."""
        try:
            logger.info(f"Converting {input_file} to PMTiles with tippecanoe")
            layer_name = input_file.stem
            
            # Try with different tippecanoe options to handle various coordinate systems
            cmd_options = [
                # First try with auto-detection and no projection specified
                [
                    "tippecanoe",
                    "-z14",  # Set explicit max zoom instead of -zg
                    "--force",
                    "-o", str(output_file),
                    "-l", layer_name,
                    str(input_file),
                ],
                # If that fails, try with different projection handling
                [
                    "tippecanoe",
                    "-z14",
                    "--projection=EPSG:4326",
                    "--force",
                    "-o", str(output_file),
                    "-l", layer_name,
                    str(input_file),
                ]
            ]
            
            for i, cmd in enumerate(cmd_options):
                logger.info(f"Running command (attempt {i+1}): {' '.join(cmd)}")
                result = subprocess.run(cmd, capture_output=True, text=True)
                if result.returncode == 0:
                    logger.info(f"Successfully converted to PMTiles: {output_file}")
                    return True
                else:
                    logger.warning(f"Tippecanoe conversion attempt {i+1} failed: {result.stderr}")
                    if i == 0:  # Clean up failed output file
                        if output_file.exists():
                            output_file.unlink()
            
            logger.error(f"All tippecanoe conversion attempts failed for {input_file}")
            return False
            
        except Exception as e:
            logger.error(f"Failed to convert {input_file} to PMTiles: {e}")
            return False
    
    def _create_basic_mbtiles(self, input_file: Path, output_file: Path):
        """Create a basic MBTiles file structure."""
        # This is a simplified implementation
        # In production, you'd use proper MBTiles creation tools
        
        # Read the GeoJSON file
        with open(input_file, 'r') as f:
            geojson_data = json.load(f)
        
        # Create a basic MBTiles structure (simplified)
        mbtiles_data = {
            'type': 'FeatureCollection',
            'features': geojson_data.get('features', []),
            'properties': geojson_data.get('properties', {})
        }
        
        # Save as a temporary file that can be converted
        temp_file = Path(self.config['temp_dir']) / f"{input_file.stem}_temp.json"
        with open(temp_file, 'w') as f:
            json.dump(mbtiles_data, f)
        
        # Convert to PMTiles using the pmtiles binary
        self._convert_to_pmtiles(temp_file, output_file)
        
        # Clean up temp file
        temp_file.unlink()
    
    def _convert_to_pmtiles(self, input_file: Path, output_file: Path):
        """Convert input file to PMTiles using the pmtiles binary."""
        try:
            # Use pmtiles convert command
            cmd = [
                self.config['pmtiles_binary'],
                'convert',
                str(input_file),
                str(output_file)
            ]
            
            logger.info(f"Running command: {' '.join(cmd)}")
            result = subprocess.run(cmd, capture_output=True, text=True)
            
            if result.returncode == 0:
                logger.info(f"Successfully converted to PMTiles: {output_file}")
            else:
                logger.error(f"PMTiles conversion failed: {result.stderr}")
                raise Exception(f"PMTiles conversion failed: {result.stderr}")
                
        except Exception as e:
            logger.error(f"Error converting to PMTiles: {e}")
            raise
    
    def convert_file(self, input_file: Path) -> Optional[Path]:
        """Convert a single GeoJSON file to PMTiles."""
        if not input_file.exists():
            logger.error(f"Input file not found: {input_file}")
            return None
        
        # Create output filename
        output_file = Path(self.config['output_dir']) / f"{input_file.stem}.pmtiles"
        
        try:
            # Convert GeoJSON to PMTiles
            if self.convert_geojson_to_pmtiles(input_file, output_file):
                logger.info(f"Successfully converted {input_file} to {output_file}")
                return output_file
            else:
                logger.error(f"Failed to convert {input_file}")
                return None
                
        except Exception as e:
            logger.error(f"Error converting {input_file}: {e}")
            return None
    
    def convert_all_files(self) -> Dict[str, Optional[Path]]:
        """Convert all GeoJSON files in the input directory to PMTiles."""
        input_dir = Path(self.config['input_dir'])
        
        if not input_dir.exists():
            logger.error(f"Input directory not found: {input_dir}")
            return {}
        
        # Find all GeoJSON files
        geojson_files = list(input_dir.glob("*.geojson"))
        
        if not geojson_files:
            logger.warning(f"No GeoJSON files found in {input_dir}")
            return {}
        
        logger.info(f"Found {len(geojson_files)} GeoJSON files to convert")
        
        # Convert each file
        results = {}
        for input_file in geojson_files:
            logger.info(f"Converting {input_file.name}")
            output_file = self.convert_file(input_file)
            results[input_file.name] = output_file
        
        return results
    
    def create_combined_pmtiles(self, output_name: str = "isochrones.pmtiles") -> bool:
        """Create a combined PMTiles file from all individual files."""
        try:
            # This would combine multiple PMTiles files into one
            # For now, we'll just copy the first available file
            pmtiles_dir = Path(self.config['output_dir'])
            pmtiles_files = list(pmtiles_dir.glob("*.pmtiles"))
            
            if not pmtiles_files:
                logger.warning("No PMTiles files found to combine")
                return False
            
            # For simplicity, just copy the first file as the combined one
            combined_file = pmtiles_dir / output_name
            shutil.copy2(pmtiles_files[0], combined_file)
            
            logger.info(f"Created combined PMTiles file: {combined_file}")
            return True
            
        except Exception as e:
            logger.error(f"Failed to create combined PMTiles: {e}")
            return False
    
    def cleanup_temp_files(self):
        """Clean up temporary files."""
        temp_dir = Path(self.config['temp_dir'])
        if temp_dir.exists():
            shutil.rmtree(temp_dir)
            logger.info("Cleaned up temporary files")


def main():
    """Main function to run the PMTiles conversion."""
    import argparse
    
    parser = argparse.ArgumentParser(description='Convert GeoJSON isochrones to PMTiles format')
    parser.add_argument('--input-dir', '-i', type=str,
                       help='Input directory containing GeoJSON files')
    parser.add_argument('--output-dir', '-o', type=str,
                       help='Output directory for PMTiles files')
    parser.add_argument('--pmtiles-binary', '-p', type=str,
                       help='Path to pmtiles binary')
    parser.add_argument('--combine', '-c', action='store_true',
                       help='Create a combined PMTiles file')
    
    args = parser.parse_args()
    
    # Load custom config if provided
    config = CONFIG.copy()
    if args.input_dir:
        config['input_dir'] = args.input_dir
    if args.output_dir:
        config['output_dir'] = args.output_dir
    if args.pmtiles_binary:
        config['pmtiles_binary'] = args.pmtiles_binary
    
    try:
        # Initialize converter
        converter = PMTilesConverter(config)
        
        # Convert all files
        results = converter.convert_all_files()
        
        # Print results
        logger.info("Conversion completed:")
        for input_name, output_file in results.items():
            if output_file:
                logger.info(f"  {input_name} -> {output_file.name}")
            else:
                logger.error(f"  {input_name} -> Failed")
        
        # Create combined file if requested
        if args.combine:
            if converter.create_combined_pmtiles():
                logger.info("Successfully created combined PMTiles file")
            else:
                logger.error("Failed to create combined PMTiles file")
        
        # Clean up
        converter.cleanup_temp_files()
        
    except Exception as e:
        logger.error(f"Conversion failed: {e}")
        return 1
    
    return 0


if __name__ == '__main__':
    exit(main())
